.. _database:

********
Database
********


Our primary database system is `PostgreSQL <https://www.postgresql.com>`_
We use `SQLAlchemy <https://www.sqlalchemy.org>`_ as ORM and SQL toolkit and
`Alembic <https://alembic.sqlalchemy.org>`_ for automated database schema migrations.


Creating a Test Database
========================

Create a database with example data for automated tests and
experimentation in dev:

.. warning::

    Check the database section in the config file to avoid overwriting the
    wrong database!

.. code-block:: shell

    python tests/create_test_db.py -c config.yml


Running Migrations
==================

Check the current revision:

.. code-block::

    alembic current

Upgrade the schema in the configured database to the latest version
(may include multiple migration steps):

.. code-block::

    alembic upgrade head

Use the `EKKLESIA_PORTAL_CONFIG` environment variable if you need to
set the path to the app configuration file. The alembic command doesn't have
an option for that.

Downgrading is also possible:

.. code-block::

    alembic downgrade -1

This rolls back the last migration step.


Schema Changes and Migrations
=============================

Migrations can be partially auto-generated by Alembic by comparing the
SQLAlchemy model/schema code with the existing database.

First, change the model/schema code for the app in :file:`src/ekklesia_*/datamodel.py`.
Then, generate the migration file with a proper migration message (used for the
filename and as a comment in the migration module):

.. code-block::

  alembic revision --autogenerate -m "Allow no target date for aborted voting phase"

Migration modules can be found in :file:`alembic/versions/`.

.. note::

    Check the generated code after generating it and remove the comments generated by Alembic!

Run the generated migration and check if it does the right thing.
You should also test the downgrade.
